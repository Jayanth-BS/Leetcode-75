class Solution {
public:
    int nearestExit(vector<vector<char>>& maze, vector<int>& entrance) {
        queue<pair<int,int>> q;
        int m=maze.size(), n=maze[0].size();
        int c=1;
        q.push({entrance[0],entrance[1]});
        vector<vector<int>> vis(m,vector<int>(n,0));
        vis[entrance[0]][entrance[1]]=1;
        int dx[4]={0, 1, 0,-1}, dy[4]={-1,0,1,0};
        while(q.size()!=0){
            int size = q.size();
            for(int i=0;i<size;i++){
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                for(int j=0;j<4;j++){
                    int x1 = x+dx[j];
                    int y1 = y+dy[j];
                    if(x1<0 || x1>= m || y1<0 || y1>=n)
                    continue;
                    if(maze[x1][y1]=='+'|| vis[x1][y1]==1)
                     continue;
                   vis[x1][y1]=1;
                    if(x1==0||y1==0||x1==m-1||y1==n-1)
                    return c;
                    q.push({x1,y1});
                }
            }
            c++;
        }
        return -1;
    }
};
